package chapter02;

public class Java04_Operator {
    public static void main(String[] args) {
        /*
        TODO 运算符
        参与运算的符号。Java定义的，无法自行定义
         */
        /*
        TODO：表达式
        所谓的表达式就是采用运算符和数据连接在一起，形成的符合Java语言规则的指令代码，称之为表达式
         */
        /*
        TODO：算数运算符
        1. 二元运算符：两个元素参与运算的运算符 加减乘除取余
            算数表达式 = 元素1 二元运算符 元素2
            这个表达式是有结果的，就需要有类型，这里的类型是元素中类型最大的哪一种
            最小使用的类型是int类型
        2. 一元运算符：一个元素参与运算的运算符
            ++ --
            ++ 运算符本质就是+1操作的简化版本，自增运算符
            -- 运算符本质就是-1操作的简化版本，自减运算符
         */
        System.out.println(1 + 2); //3 二元运算
        System.out.println(1 / 2); //0 int/int=int,所以不是0.5，是0
        System.out.println(1.0 / 2); //double / int = double (因为double比int大) 结果是0.5
        byte b1 = 10;
        byte b2 = 20;
        byte b3 = (byte) (b1 + b2); //从byte+byte，默认结果是int（不加括号b3会报错），用（byte）强制转换为byte
        System.out.println(b3);
        int i = 0;
        //int j = i; // j = 0
        int j = ++i; // ++i先加1，i++后加1
        System.out.println(j);
        i = i + 1; // i = 0 + 1
        System.out.println("i = " + i);
        System.out.println("j = " + j);

        /*
        TODO 赋值运算符
        = 就是赋值运算符，将等号右边表达式的结果赋值给等号左边的变量
        赋值运算符需要考虑类型的关系
         */
        /*
        TODO 复合赋值运算符： +=
            如果元素进行运算后重新赋值给自己，那么可以将运算和赋值的符号进行简化
            如果使用了复合赋值运算符，那么数据的类型不会发生变化
         */
        int i1 = 1;
        i1 = i + 1; // i += 1
        byte b = 10;
        b1 = (byte) (b + 20);
        //或者 b1 += 20 不需要强制类型转换
        System.out.println(b1);
        /*
        TODO 关系运算符
            所谓的关系运算符，就是比较两个数据之间关系的运算符
            元素1（数据1，表达式1） 关系运算符[==, !=, >, >=, <, <=] 元素2（数据2，表达式2）
            关系表达式的结果为布尔类型。True 或者 False
         */
        /*
        TODO 逻辑运算符
            所谓的逻辑运算符其实是用于描述多个条件表达式之间的关系的运算符
            语法结构：
            变量 = （条件表达式1） 逻辑运算符 （条件表达式2）
            结果的变量的类型依然为布尔类型
            因为条件表达式的结果类型为布尔类型，所以逻辑运算符表达式的结果类型也是布尔类型，但是分为几种情况
            & 要求两个条件表达式都必须计算出结果，只有当两个结果都是T时，最终结果为t，其他情况结果为f
            | 要求两个条件表达式都必须计算出结果，任何一个结果为T，最终结果为T，结果都是f，最终结果才是f
            && 短路与运算，会根据第一个表达式的结果来判断，是否执行第二个条件表达式
                如果第一个表达式的结果是f，那么就无需执行第二个表达式
            || 短路或运算，会根据第一个表达式的结果来判断，是否执行第二个条件表达式
            ! 非（相反）运算，结果与真实结果相反
         */
        int i2 = 10;
        boolean result = (i2 > 5) & (i2 < 20);
        System.out.println(result); // true
        System.out.println(!result); // false
        /*
        TODO 三元运算符
            所谓的三元运算符就是三个元素参与运算的运算符
            基本语法结构：
                变量 = (条件表达式) ？ （任意表达式1） : (任意表达式2)
                判断条件表达式的结果，如果为true，那么执行任意表达式1的值，如果为false，执行任意表达式2的值
         */
        int k = (i2 == 10) ? 1+1 : 2+2;
        System.out.println(k); // 结果是2，因为i2==10为true



    }
}
